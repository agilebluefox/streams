{"version":3,"sources":["../../../../Projects/Thinkful/streams/main.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,WAAW,QAAQ,YAAR,CAAjB;AACA,IAAM,eAAe,QAAQ,UAAR,CAArB;AACA,IAAM,QAAQ,QAAQ,SAAR,CAAd;AACA,IAAM,SAAS,QAAQ,UAAR,CAAf;AACA,IAAM,gBAAgB,QAAQ,gBAAR,EAA0B,aAAhD;AACA,IAAM,UAAU,IAAI,aAAJ,CAAkB,MAAlB,CAAhB;AACA,IAAI,QAAQ,IAAI,QAAJ,EAAZ;AACA,IAAI,QAAQ,IAAI,KAAJ,CAAU,QAAV,CAAZ;AACA,IAAI,OAAO,IAAI,YAAJ,EAAX;AACA,IAAI,SAAS,IAAI,MAAJ,EAAb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,GAAR,CAAY,cAAZ;;AAEA;AACA,QAAQ,IAAI,KAAJ,CAAU,MAAV,CAAR;AACA;AACA,KAAK,IAAL,CAAU,MAAV,EAAkB,IAAlB,CAAuB,KAAvB;;AAEA;AACA,KAAK,EAAL,CAAQ,MAAR,EAAgB,UAAC,KAAD,EAAY;AACxB;AACA,YAAQ,GAAR,CAAY,MAAM,QAAN,EAAZ,EAFwB,CAEO;AAClC,CAHD;;AAKA;AACA,MAAM,EAAN,CAAS,QAAT,EAAmB,YAAM;AACrB,SAAK,IAAI,GAAT,IAAgB,MAAM,KAAtB,EAA6B;AACzB;AACA,gBAAQ,GAAR,CAAY,GAAZ,EAAiB,GAAjB,EAAsB,MAAM,KAAN,CAAY,GAAZ,CAAtB,EAFyB,CAEgB;AACzC,YAAI,IAAI,MAAM,KAAN,CAAY,GAAZ,CAAR;AAHyB;AAAA;AAAA;;AAAA;AAIzB,iCAAkB,EAAE,MAAF,EAAlB,8HAA8B;AAAA,oBAArB,KAAqB;;AAC1B,wBAAQ,GAAR,CAAY,OAAO,YAAP,CAAoB,KAApB,CAAZ,EAD0B,CACe;AAC5C;AACD;AACA;AARyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASzB,gBAAQ,KAAR,CAAc,CAAd,EATyB,CASP;AACrB;AACJ,CAZD","file":"main-compiled.js","sourcesContent":["\"use strict\";\n\nconst Alphabet = require('./alphabet');\nconst RandomNumber = require('./number');\nconst Cache = require('./cache');\nconst Filter = require('./filter');\nconst StringDecoder = require('string_decoder').StringDecoder;\nconst decoder = new StringDecoder('utf8');\nlet alpha = new Alphabet();\nlet cache = new Cache('alpha1');\nlet rand = new RandomNumber;\nlet filter = new Filter;\n\n// print out the letters of the alphabet\n// alpha.on('data', function (chunk) {\n//     console.log(chunk.toString());\n// });\n//\n// alpha.pipe(cache);\n\nconsole.log('Cache store:');\n\n// add a key to the cache\ncache = new Cache('num1');\n// pipe the readable instance to the transform then to the writable\nrand.pipe(filter).pipe(cache);\n\n// perform a function when the read event is triggered\nrand.on('data', (chunk)  => {\n    // print the list of numbers in the buffer\n    console.log(chunk.toString()); // ie. 123 345 234 567\n});\n\n// perform a function when the finish event occurs on the writeable instance\ncache.on('finish', () => {\n    for (let key in Cache.store) {\n        // print the key and the buffer data stored as the value\n        console.log(key, ':', Cache.store[key]); // prints the buffer contents in hex\n        let b = Cache.store[key];\n        for (let value of b.values()) {\n            console.log(String.fromCharCode(value)); // prints single number, not element\n        }\n        // print the numbers in the buffer after being filtered\n        // console.log(b.toString('utf8')); // ie. 123345234\n        decoder.write(b); //prints one number at a time\n    }\n});\n"]}